import random
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import tkinter.messagebox
from tkinter import *
from prettytable import PrettyTable
import tkinter as tk
from tkinter import ttk

'''
top = Tk()  # creating the main window
top.title('Simulation for queuing system')  # setting title of the window
top.geometry('300x100')  # setting the size of the window


def func():  # function of the button
    tkinter.messagebox.showinfo("Greetings", "HELLO! YOU SHOULD CLOSE THE TEXT BOX TO SEE THE RESULT OF SIMULATING.")


btn = Button(top, text="Simulate", width=17, height=3, command=func, fg='black', bg='red')
btn.place(x=90, y=17)
top.mainloop()  # running the loop that works as a trigger
'''
intial = 0
size = 10

InterArrivalTime = [0, 0, 2, 3, 3, 0, 2, 1, 0, 1]
ArrivalTime = [intial] * size
# CustomerType = ['-'] * size
CustomerType = ['R', 'R', 'R', 'E', 'E', 'E', 'E', 'E', 'E', 'R']
# SerivceTime = [intial] * size
SerivceTime = [5, 5, 3, 3, 1, 1, 1, 2, 1, 5]
TimeServiceStart = [intial] * size
WaitingTimeEX = [intial] * size
WaitingTimeRG = [intial] * size
TimeServiceEnd = [intial] * size
TimeInSys = [intial] * size
AvpForEX = [intial] * size
AvpForRg = [intial] * size

table = PrettyTable()


class Client:
    inter_arrival_time = 0
    type = '-'
    arrival_time = 0
    service_time = 0
    service_start_time = 0
    WaitingTimerg = 0
    WaitingTimeex = 0
    completion_time = 0
    total_time = 0
    cashierex = 0
    cashierereg = 0

    def __init__(self):
        self.inter_arrival_time = 0
        self.type = '-'
        self.arrival_time = 0
        self.service_time = 0
        self.service_start_time = 0
        self.WaitingTimeex = 0
        self.WaitingTimerg = 0
        self.completion_time = 0
        self.total_time = 0
        self.avpcashierex = 0
        self.avpcashierereg = 0

    def print(self):
        print("Inter arrival Time = ", self.inter_arrival_time)
        print("Customer type =",self.type)
        print("Arrival Time = ", self.arrival_time)
        print("Service Time = ", self.service_time)
        print("Service Start Time = ", self.service_start_time)
        print("Waiting Time EX = ", self.WaitingTimeex)
        print("Waiting Time RG = ", self.WaitingTimerg)
        print("Completion Time = ", self.completion_time)
        print("Total Time = ", self.total_time)
        print("Available Cashier EX = ", self.cashierex)
        print("Available Cashier EX = ", self.cashierereg)
        print("======================")
        return


def generateCustType():
    r = round(random.uniform(0, 1), 2)
    return r


def generateIAT():
    r = round(random.uniform(0, 1), 2)
    return r


def generateSTEX():
    r = round(random.uniform(0, 1), 2)
    return r


def generateSTRE():
    r = round(random.uniform(0, 1), 2)
    return r


def lenOfQueue(x, arr):
    z = 0
    t = 0
    i = 1
    for i in range(x):
        if (arr[i] == arr[i - 1] and arr[i] > 0):
            t += 1
        else:
            z = max(z, t)
            t = 0
        z = max(z, t)
    return z


table = PrettyTable()
table.field_names = ["Cust", "Type", "IAT"
    , "Arrival Time"
    , "Service Time"
    , "TimeService Start"
    , "Waiting Time EX "
    , "Waiting Time RG "
    , "Time Service End"
    , "Time in System"
    , "Avb for ex"
    , "Avb for rg"]

for i in range(10):
    if i == 0:
        ArrivalTime[i] = InterArrivalTime[i]
        TimeServiceStart[i] = ArrivalTime[i]
        WaitingTimeEX[i] = 0
        WaitingTimeRG[i] = 0
        TimeServiceEnd[i] = SerivceTime[i] + TimeServiceStart[i]
        TimeInSys[i] = TimeServiceEnd[i] - ArrivalTime[i]
        AvpForRg[i] = TimeServiceEnd[i]
        AvpForEX[i] = 0
    else:
        ArrivalTime[i] = ArrivalTime[i - 1] + InterArrivalTime[i]
        if CustomerType[i] == 'E' and lenOfQueue(i, WaitingTimeRG) * 1.5 >= lenOfQueue(i, WaitingTimeEX):
            if (ArrivalTime[i] >= AvpForEX[i - 1]):
                TimeServiceStart[i] = ArrivalTime[i]
                WaitingTimeRG[i] = 0
                WaitingTimeEX[i] = 0
                TimeServiceEnd[i] = TimeServiceStart[i] + SerivceTime[i]
                TimeInSys[i] = TimeServiceEnd[i] - ArrivalTime[i]
                AvpForEX[i] = TimeServiceEnd[i]
                AvpForRg[i] = AvpForRg[i - 1]
            elif ArrivalTime[i] < AvpForEX[i - 1]:
                TimeServiceStart[i] = AvpForEX[i - 1]
                WaitingTimeEX[i] = TimeServiceStart[i] - ArrivalTime[i]
                TimeServiceEnd[i] = TimeServiceStart[i] + SerivceTime[i]
                TimeInSys[i] = TimeServiceEnd[i] - ArrivalTime[i]
                AvpForEX[i] = TimeServiceEnd[i]
                AvpForRg[i] = AvpForRg[i - 1]


        elif CustomerType[i] == 'R' or (
                CustomerType[i] == 'E' and lenOfQueue(i, WaitingTimeRG) * 1.5 < lenOfQueue(i, WaitingTimeEX)):
            if (ArrivalTime[i] < AvpForRg[i - 1]):
                x = lenOfQueue(i, WaitingTimeRG)
                y = lenOfQueue(i, WaitingTimeEX)
                TimeServiceStart[i] = AvpForRg[i - 1]
                WaitingTimeRG[i] = TimeServiceStart[i] - ArrivalTime[i]
                WaitingTimeEX[i] = 0
                TimeServiceEnd[i] = TimeServiceStart[i] + SerivceTime[i]
                TimeInSys[i] = TimeServiceEnd[i] - ArrivalTime[i]
                AvpForEX[i] = AvpForEX[i - 1]
                AvpForRg[i] = TimeServiceEnd[i]
            else:
                TimeServiceStart[i] = ArrivalTime[i]
                WaitingTimeRG[i] = 0
                WaitingTimeEX[i] = 0
                TimeServiceEnd[i] = TimeServiceStart[i] + SerivceTime[i]
                TimeInSys[i] = TimeServiceEnd[i] - ArrivalTime[i]
                AvpForEX[i] = AvpForEX[i - 1]
                AvpForRg[i] = TimeServiceEnd[i]
    table.add_row([i + 1, CustomerType[i], InterArrivalTime[i]
                      , ArrivalTime[i]
                      , SerivceTime[i]
                      , TimeServiceStart[i]
                      , WaitingTimeEX[i]
                      , WaitingTimeRG[i]
                      , TimeServiceEnd[i]
                      , TimeInSys[i]
                      , AvpForEX[i]
                      , AvpForRg[i]])
print(table)
'''
def display_table_in_gui():
    window = tk.Tk()
    window.title("Calendar")

    # Create a Text widget to display the table
    text_widget = tk.Text(window, height=200, width=240)
    
    text_widget.pack()

    # Get the table content
    table_content = table

    # Insert the table content into the Text widget
    text_widget.insert(tk.END, table_content)

    # Disable text widget for read-only
    text_widget.config(state=tk.DISABLED)

    # Run the Tkinter main loop
    window.mainloop()

# Display the table in the GUI
display_table_in_gui()
'''
